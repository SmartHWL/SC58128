<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\GeneralMotorCtrl.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\GeneralMotorCtrl.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed May 18 14:48:43 2022
<BR><P>
<H3>Maximum Stack Usage =        200 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
eMBFuncReadCoils &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2a]">ADC1_IRQHandler</a> from sl_niv.o(i.ADC1_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[2b]">ADC2_IRQHandler</a> from sl_niv.o(i.ADC2_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[2c]">ADC3_IRQHandler</a> from sl_niv.o(i.ADC3_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[2d]">ADC_IRQHandler</a> from sl_niv.o(i.ADC_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[1c]">CAN_IRQHandler</a> from sl_niv.o(i.CAN_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[24]">COPROC_IRQHandler</a> from sl_niv.o(i.COPROC_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[3a]">DBG_SetTxLiveData</a> from dbgtool.o(i.DBG_SetTxLiveData) referenced from wavesmp.o(i.WAVE_SetWaveBufSize)
 <LI><a href="#[23]">DMA_IRQHandler</a> from sl_niv.o(i.DMA_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[1d]">ECAP0_IRQHandler</a> from sl_niv.o(i.ECAP0_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[1e]">ECAP1_IRQHandler</a> from sl_niv.o(i.ECAP1_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[1f]">ECAP2_IRQHandler</a> from sl_niv.o(i.ECAP2_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[20]">EQEP0_IRQHandler</a> from sl_niv.o(i.EQEP0_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[21]">EQEP1_IRQHandler</a> from sl_niv.o(i.EQEP1_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[33]">ERU0_IRQHandler</a> from sl_niv.o(i.ERU0_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[34]">ERU1_IRQHandler</a> from sl_niv.o(i.ERU1_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[35]">ERU2_IRQHandler</a> from sl_niv.o(i.ERU2_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[36]">ERU3_IRQHandler</a> from sl_niv.o(i.ERU3_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[22]">GPIO_IRQHandler</a> from sl_niv.o(i.GPIO_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[13]">HardFault_Handler</a> from sl_niv.o(i.HardFault_Handler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[12]">NMI_Handler</a> from sl_niv.o(i.NMI_Handler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[2e]">PWM0_IRQHandler</a> from sl_niv.o(i.PWM0_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[32]">PWM1256_IRQHandler</a> from sl_niv.o(i.PWM1256_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[2f]">PWM3_IRQHandler</a> from sl_niv.o(i.PWM3_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[30]">PWM4_IRQHandler</a> from sl_niv.o(i.PWM4_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[31]">PWM7_IRQHandler</a> from sl_niv.o(i.PWM7_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[15]">PendSV_Handler</a> from sl_niv.o(i.PendSV_Handler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[11]">Reset_Handler</a> from startup_sc32f58128.o(.text) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[1a]">SSP01_IRQHandler</a> from sl_niv.o(i.SSP01_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[1b]">SSP23_IIC_IRQHandler</a> from sl_niv.o(i.SSP23_IIC_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[14]">SVC_Handler</a> from sl_niv.o(i.SVC_Handler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[25]">SYS_IRQHandler</a> from sl_niv.o(i.SYS_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[16]">SysTick_Handler</a> from sl_niv.o(i.SysTick_Handler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[38]">SystemInit</a> from system_sc32f58128.o(i.SystemInit) referenced from startup_sc32f58128.o(.text)
 <LI><a href="#[27]">TIMER0_IRQHandler</a> from porttimer.o(i.TIMER0_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[28]">TIMER1_IRQHandler</a> from sl_niv.o(i.TIMER1_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[29]">TIMER234_IRQHandler</a> from sl_niv.o(i.TIMER234_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[18]">UART0_IRQHandler</a> from sl_niv.o(i.UART0_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[17]">UART0_RX_IRQHandler</a> from sl_niv.o(i.UART0_RX_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[19]">UART12_IRQHandler</a> from portserial.o(i.UART12_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[42]">__main</a> from __main.o(!!!main) referenced from startup_sc32f58128.o(.text)
 <LI><a href="#[d]">eMBFuncReadCoils</a> from mbfunccoils.o(i.eMBFuncReadCoils) referenced 2 times from mb.o(.data)
 <LI><a href="#[10]">eMBFuncReadDiscreteInputs</a> from mbfuncdisc.o(i.eMBFuncReadDiscreteInputs) referenced 2 times from mb.o(.data)
 <LI><a href="#[9]">eMBFuncReadHoldingRegister</a> from mbfuncholding.o(i.eMBFuncReadHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[8]">eMBFuncReadInputRegister</a> from mbfuncinput.o(i.eMBFuncReadInputRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[c]">eMBFuncReadWriteMultipleHoldingRegister</a> from mbfuncholding.o(i.eMBFuncReadWriteMultipleHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[7]">eMBFuncReportSlaveID</a> from mbfuncother.o(i.eMBFuncReportSlaveID) referenced 2 times from mb.o(.data)
 <LI><a href="#[e]">eMBFuncWriteCoil</a> from mbfunccoils.o(i.eMBFuncWriteCoil) referenced 2 times from mb.o(.data)
 <LI><a href="#[b]">eMBFuncWriteHoldingRegister</a> from mbfuncholding.o(i.eMBFuncWriteHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[f]">eMBFuncWriteMultipleCoils</a> from mbfunccoils.o(i.eMBFuncWriteMultipleCoils) referenced 2 times from mb.o(.data)
 <LI><a href="#[a]">eMBFuncWriteMultipleHoldingRegister</a> from mbfuncholding.o(i.eMBFuncWriteMultipleHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[3e]">eMBRTUReceive</a> from mbrtu.o(i.eMBRTUReceive) referenced from mb.o(i.eMBInit)
 <LI><a href="#[3d]">eMBRTUSend</a> from mbrtu.o(i.eMBRTUSend) referenced from mb.o(i.eMBInit)
 <LI><a href="#[3b]">eMBRTUStart</a> from mbrtu.o(i.eMBRTUStart) referenced from mb.o(i.eMBInit)
 <LI><a href="#[3c]">eMBRTUStop</a> from mbrtu.o(i.eMBRTUStop) referenced from mb.o(i.eMBInit)
 <LI><a href="#[37]">main_c1</a> from sl_main.o(i.main_c1) referenced from startup_sc32f58128.o(.text)
 <LI><a href="#[26]">rsv1_IRQHandler</a> from sl_niv.o(i.rsv1_IRQHandler) referenced from startup_sc32f58128.o(RESET)
 <LI><a href="#[3f]">xMBRTUReceiveFSM</a> from mbrtu.o(i.xMBRTUReceiveFSM) referenced from mb.o(i.eMBInit)
 <LI><a href="#[41]">xMBRTUTimerT35Expired</a> from mbrtu.o(i.xMBRTUTimerT35Expired) referenced from mb.o(i.eMBInit)
 <LI><a href="#[40]">xMBRTUTransmitFSM</a> from mbrtu.o(i.xMBRTUTransmitFSM) referenced from mb.o(i.eMBInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[42]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[43]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[45]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[ab]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ac]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ad]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[49]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ae]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[af]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[bd]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[be]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[c1]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[c3]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[c4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[c5]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[c6]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[c7]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[c8]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[c9]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[44]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ca]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[46]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[48]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[cb]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; eMBInit &rArr; eMBRTUInit &rArr; xMBPortTimersInit &rArr; TIMER_TmrConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[cc]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[5e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[cd]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[11]"></a>Reset_Handler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, startup_sc32f58128.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_sc32f58128.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_TmrConfig
</UL>

<P><STRONG><a name="[cf]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_assert</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilSetBits
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
</UL>

<P><STRONG><a name="[d0]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReportSlaveID
</UL>

<P><STRONG><a name="[d1]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_WdtInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_DeviceSystemInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TICK_TimerTickRunning
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_SetWaveBufSize
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_SetWaveBufSize
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[d4]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>abort</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[52]"></a>__assert_puts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, assert_puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __assert_puts &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[58]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[50]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[57]"></a>__rt_SIGABRT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[d7]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d8]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4c]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[5a]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[59]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[5f]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[dc]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>ADC1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.ADC1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ADC2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.ADC2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.ADC3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>BSP_GpioInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bsp_gpio.o(i.BSP_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_GpioInit &rArr; GPIO_PullUpDownSel
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullUpDownSel
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputEnable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_MuxSel
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_DevicePeripheralInit
</UL>

<P><STRONG><a name="[65]"></a>BSP_UartInit</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, bsp_uart.o(i.BSP_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_UartInit &rArr; UartInit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[1c]"></a>CAN_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.CAN_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>COPROC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.COPROC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DBG_ParamInit</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, dbgtool.o(i.DBG_ParamInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DBG_ParamInit &rArr; mg_ParamInit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_ParamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_DeviceInit
</UL>

<P><STRONG><a name="[3a]"></a>DBG_SetTxLiveData</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, dbgtool.o(i.DBG_SetTxLiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DBG_SetTxLiveData &rArr; mg_SetCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TranferData2UartTx
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_DataTrans
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_SetCrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wavesmp.o(i.WAVE_SetWaveBufSize)
</UL>
<P><STRONG><a name="[23]"></a>DMA_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sl_niv.o(i.DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_IRQHandler &rArr; SendNotSendData2UartTx
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendNotSendData2UartTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>DMA_Init</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, bsp_dma.o(i.DMA_Init))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_DevicePeripheralInit
</UL>

<P><STRONG><a name="[6b]"></a>DMA_TranferData2UartTx</STRONG> (Thumb, 272 bytes, Stack size 12 bytes, bsp_dma.o(i.DMA_TranferData2UartTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_TranferData2UartTx
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_SetTxLiveData
</UL>

<P><STRONG><a name="[1d]"></a>ECAP0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.ECAP0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ECAP1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.ECAP1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ECAP2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.ECAP2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EQEP0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.EQEP0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EQEP1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.EQEP1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>ERU0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.ERU0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>ERU1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.ERU1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>ERU2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.ERU2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ERU3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.ERU3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>GPIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.GPIO_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIO_MuxSel</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, sc32f58128_gpio.o(i.GPIO_MuxSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_MuxSel
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_PortSelect
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GpioInit
</UL>

<P><STRONG><a name="[63]"></a>GPIO_OutputEnable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sc32f58128_gpio.o(i.GPIO_OutputEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_OutputEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_PortSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GpioInit
</UL>

<P><STRONG><a name="[62]"></a>GPIO_PullUpDownSel</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, sc32f58128_gpio.o(i.GPIO_PullUpDownSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_PullUpDownSel
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_PortSelect
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GpioInit
</UL>

<P><STRONG><a name="[64]"></a>GPIO_SetHigh</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sc32f58128_gpio.o(i.GPIO_SetHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_PortSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GpioInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>GPIO_SetLow</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sc32f58128_gpio.o(i.GPIO_SetLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_PortSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sl_niv.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>INIT_DeviceInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, devinit.o(i.INIT_DeviceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = INIT_DeviceInit &rArr; WAVE_Init &rArr; WAVE_SetWaveBufSize &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ParamInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_WdtInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_SetIRQ
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_DeviceSystemInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_DevicePeripheralInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PWM0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.PWM0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PWM1256_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.PWM1256_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PWM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.PWM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PWM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.PWM4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PWM7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.PWM7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>PWM_Init</STRONG> (Thumb, 456 bytes, Stack size 16 bytes, bsp_pwm.o(i.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PWM_Init &rArr; GPIO_MuxSel
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_MuxSel
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_DevicePeripheralInit
</UL>

<P><STRONG><a name="[15]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SSP01_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.SSP01_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SSP23_IIC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.SSP23_IIC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SYS_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.SYS_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SendNotSendData2UartTx</STRONG> (Thumb, 342 bytes, Stack size 8 bytes, bsp_dma.o(i.SendNotSendData2UartTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendNotSendData2UartTx
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>SysClkDivSel</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sc32f58128_sysclkcfg.o(i.SysClkDivSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysClkDivSel
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_DeviceSystemInit
</UL>

<P><STRONG><a name="[7b]"></a>SysClockConfig</STRONG> (Thumb, 518 bytes, Stack size 20 bytes, sc32f58128_sysclkcfg.o(i.SysClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_EnableRCH
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_EnablePLL
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_EnableOSC
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_DisablePLL
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_DisableOSC
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_DeviceSystemInit
</UL>

<P><STRONG><a name="[16]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sl_niv.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, system_sc32f58128.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_DeviceSystemInit
</UL>

<P><STRONG><a name="[38]"></a>SystemInit</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, system_sc32f58128.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>TICK_TimerInit4C0</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timer4tick.o(i.TICK_TimerInit4C0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TICK_TimerInit4C0
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TICK_TimerTickInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>TICK_TimerTickInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer4tick.o(i.TICK_TimerTickInit))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TICK_TimerInit4C0
</UL>

<P><STRONG><a name="[85]"></a>TICK_TimerTickRunning</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, timer4tick.o(i.TICK_TimerTickRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TICK_TimerTickRunning
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, porttimer.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER0_IRQHandler &rArr; prvvTIMERExpiredISR
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvTIMERExpiredISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sl_niv.o(i.TIMER1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER234_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.TIMER234_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>TIMER_TmrConfig</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, sc32f58128_timer.o(i.TIMER_TmrConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIMER_TmrConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_DevicePeripheralInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[18]"></a>UART0_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sl_niv.o(i.UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART0_RX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.UART0_RX_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART12_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, portserial.o(i.UART12_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART12_IRQHandler &rArr; prvvUARTTxReadyISR
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTTxReadyISR
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTRxISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>UartInit</STRONG> (Thumb, 470 bytes, Stack size 24 bytes, sc32f58128_uart.o(i.UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UartInit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UartInit
</UL>

<P><STRONG><a name="[8d]"></a>WAVE_GetCmdData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wavesmp.o(i.WAVE_GetCmdData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WAVE_GetCmdData
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Init
</UL>

<P><STRONG><a name="[74]"></a>WAVE_Init</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, wavesmp.o(i.WAVE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WAVE_Init &rArr; WAVE_SetWaveBufSize &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_SetWaveBufSize
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_GetCmdData
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_DeviceInit
</UL>

<P><STRONG><a name="[8c]"></a>WAVE_SetWaveBufSize</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, wavesmp.o(i.WAVE_SetWaveBufSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WAVE_SetWaveBufSize &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Init
</UL>

<P><STRONG><a name="[88]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sc32f58128_qep.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_TmrConfig
</UL>

<P><STRONG><a name="[78]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dbgtool.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[a3]"></a>eMBEnable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mb.o(i.eMBEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d]"></a>eMBFuncReadCoils</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, mbfunccoils.o(i.eMBFuncReadCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = eMBFuncReadCoils &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>eMBFuncReadDiscreteInputs</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, mbfuncdisc.o(i.eMBFuncReadDiscreteInputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = eMBFuncReadDiscreteInputs &rArr; eMBRegDiscreteCB &rArr; xMBUtilGetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>eMBFuncReadHoldingRegister</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, mbfuncholding.o(i.eMBFuncReadHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eMBFuncReadHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>eMBFuncReadInputRegister</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, mbfuncinput.o(i.eMBFuncReadInputRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBFuncReadInputRegister &rArr; eMBRegInputCB
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegInputCB
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>eMBFuncReadWriteMultipleHoldingRegister</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, mbfuncholding.o(i.eMBFuncReadWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eMBFuncReadWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>eMBFuncReportSlaveID</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mbfuncother.o(i.eMBFuncReportSlaveID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBFuncReportSlaveID &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>eMBFuncWriteCoil</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, mbfunccoils.o(i.eMBFuncWriteCoil))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = eMBFuncWriteCoil &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>eMBFuncWriteHoldingRegister</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mbfuncholding.o(i.eMBFuncWriteHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBFuncWriteHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>eMBFuncWriteMultipleCoils</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, mbfunccoils.o(i.eMBFuncWriteMultipleCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = eMBFuncWriteMultipleCoils &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>eMBFuncWriteMultipleHoldingRegister</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, mbfuncholding.o(i.eMBFuncWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eMBFuncWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[93]"></a>eMBInit</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, mb.o(i.eMBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = eMBInit &rArr; eMBRTUInit &rArr; xMBPortTimersInit &rArr; TIMER_TmrConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>eMBPoll</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, mb.o(i.eMBPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBPoll
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventGet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>eMBRTUInit</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, mbrtu.o(i.eMBRTUInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = eMBRTUInit &rArr; xMBPortTimersInit &rArr; TIMER_TmrConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[3e]"></a>eMBRTUReceive</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mbrtu.o(i.eMBRTUReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = eMBRTUReceive &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[3d]"></a>eMBRTUSend</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, mbrtu.o(i.eMBRTUSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBRTUSend &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[3b]"></a>eMBRTUStart</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mbrtu.o(i.eMBRTUStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBRTUStart
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[3c]"></a>eMBRTUStop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mbrtu.o(i.eMBRTUStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBRTUStop
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[8e]"></a>eMBRegCoilsCB</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, usermodbus.o(i.eMBRegCoilsCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = eMBRegCoilsCB &rArr; xMBUtilSetBits &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilSetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilGetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
</UL>

<P><STRONG><a name="[90]"></a>eMBRegDiscreteCB</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, usermodbus.o(i.eMBRegDiscreteCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = eMBRegDiscreteCB &rArr; xMBUtilGetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilGetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
</UL>

<P><STRONG><a name="[91]"></a>eMBRegHoldingCB</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, usermodbus.o(i.eMBRegHoldingCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eMBRegHoldingCB
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
</UL>

<P><STRONG><a name="[92]"></a>eMBRegInputCB</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usermodbus.o(i.eMBRegInputCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBRegInputCB
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
</UL>

<P><STRONG><a name="[4b]"></a>main</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, sl_main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = main &rArr; eMBInit &rArr; eMBRTUInit &rArr; xMBPortTimersInit &rArr; TIMER_TmrConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TICK_TimerTickRunning
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TICK_TimerInit4C0
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_DeviceInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetLow
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[37]"></a>main_c1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sl_main.o(i.main_c1))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>mg_CacheInit</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, devinit.o(i.mg_CacheInit))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_DeviceSystemInit
</UL>

<P><STRONG><a name="[69]"></a>mg_DataTrans</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dbgtool.o(i.mg_DataTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mg_DataTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_SetTxLiveData
</UL>

<P><STRONG><a name="[73]"></a>mg_DevicePeripheralInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, devinit.o(i.mg_DevicePeripheralInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mg_DevicePeripheralInit &rArr; TIMER_TmrConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_TmrConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_DeviceInit
</UL>

<P><STRONG><a name="[72]"></a>mg_DeviceSystemInit</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, devinit.o(i.mg_DeviceSystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mg_DeviceSystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClockConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkDivSel
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_CacheInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_DeviceInit
</UL>

<P><STRONG><a name="[7d]"></a>mg_DisableOSC</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sc32f58128_sysclkcfg.o(i.mg_DisableOSC))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClockConfig
</UL>

<P><STRONG><a name="[7f]"></a>mg_DisablePLL</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sc32f58128_sysclkcfg.o(i.mg_DisablePLL))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClockConfig
</UL>

<P><STRONG><a name="[7e]"></a>mg_EnableOSC</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sc32f58128_sysclkcfg.o(i.mg_EnableOSC))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClockConfig
</UL>

<P><STRONG><a name="[80]"></a>mg_EnablePLL</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sc32f58128_sysclkcfg.o(i.mg_EnablePLL))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClockConfig
</UL>

<P><STRONG><a name="[7c]"></a>mg_EnableRCH</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sc32f58128_sysclkcfg.o(i.mg_EnableRCH))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClockConfig
</UL>

<P><STRONG><a name="[68]"></a>mg_ParamInit</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, dbgtool.o(i.mg_ParamInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mg_ParamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ParamInit
</UL>

<P><STRONG><a name="[6d]"></a>mg_PortSelect</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, sc32f58128_gpio.o(i.mg_PortSelect))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullUpDownSel
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputEnable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_MuxSel
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetLow
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetHigh
</UL>

<P><STRONG><a name="[76]"></a>mg_SetIRQ</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, devinit.o(i.mg_SetIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mg_SetIRQ &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_DeviceInit
</UL>

<P><STRONG><a name="[75]"></a>mg_WdtInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, devinit.o(i.mg_WdtInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mg_WdtInit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_DeviceInit
</UL>

<P><STRONG><a name="[8f]"></a>prveMBError2Exception</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mbutils.o(i.prveMBError2Exception))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
</UL>

<P><STRONG><a name="[86]"></a>prvvTIMERExpiredISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, porttimer.o(i.prvvTIMERExpiredISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvTIMERExpiredISR
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>prvvUARTRxISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, portserial.o(i.prvvUARTRxISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvUARTRxISR
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART12_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>prvvUARTTxReadyISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, portserial.o(i.prvvUARTTxReadyISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvUARTTxReadyISR
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART12_IRQHandler
</UL>

<P><STRONG><a name="[26]"></a>rsv1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sl_niv.o(i.rsv1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sc32f58128.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>usMBCRC16</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mbcrc.o(i.usMBCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usMBCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
</UL>

<P><STRONG><a name="[9e]"></a>vMBPortSerialEnable</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, portserial.o(i.vMBPortSerialEnable))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
</UL>

<P><STRONG><a name="[a0]"></a>vMBPortTimersDisable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, porttimer.o(i.vMBPortTimersDisable))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
</UL>

<P><STRONG><a name="[9f]"></a>vMBPortTimersEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, porttimer.o(i.vMBPortTimersEnable))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
</UL>

<P><STRONG><a name="[97]"></a>xMBPortEventGet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventGet))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[95]"></a>xMBPortEventInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventInit))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[98]"></a>xMBPortEventPost</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventPost))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
</UL>

<P><STRONG><a name="[aa]"></a>xMBPortSerialGetByte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, portserial.o(i.xMBPortSerialGetByte))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
</UL>

<P><STRONG><a name="[9a]"></a>xMBPortSerialInit</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, portserial.o(i.xMBPortSerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xMBPortSerialInit &rArr; BSP_UartInit &rArr; UartInit
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[9d]"></a>xMBPortSerialPutByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, portserial.o(i.xMBPortSerialPutByte))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
</UL>

<P><STRONG><a name="[9b]"></a>xMBPortTimersInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, porttimer.o(i.xMBPortTimersInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xMBPortTimersInit &rArr; TIMER_TmrConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_TmrConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[3f]"></a>xMBRTUReceiveFSM</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, mbrtu.o(i.xMBRTUReceiveFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = xMBRTUReceiveFSM &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialGetByte
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[41]"></a>xMBRTUTimerT35Expired</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, mbrtu.o(i.xMBRTUTimerT35Expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = xMBRTUTimerT35Expired &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[40]"></a>xMBRTUTransmitFSM</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, mbrtu.o(i.xMBRTUTransmitFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = xMBRTUTransmitFSM &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[a1]"></a>xMBUtilGetBits</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, mbutils.o(i.xMBUtilGetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = xMBUtilGetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>

<P><STRONG><a name="[a2]"></a>xMBUtilSetBits</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, mbutils.o(i.xMBUtilSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = xMBUtilSetBits &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a8]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, devinit.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_SetIRQ
</UL>

<P><STRONG><a name="[a9]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, devinit.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_SetIRQ
</UL>

<P><STRONG><a name="[a6]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, devinit.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_SetIRQ
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_DeviceSystemInit
</UL>

<P><STRONG><a name="[79]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_pwm.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[7a]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_pwm.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[99]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbrtu.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[6e]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sc32f58128_gpio.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullUpDownSel
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_MuxSel
</UL>

<P><STRONG><a name="[6f]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sc32f58128_gpio.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullUpDownSel
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_MuxSel
</UL>

<P><STRONG><a name="[6a]"></a>mg_SetCrc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dbgtool.o(i.mg_SetCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mg_SetCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_SetTxLiveData
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[5d]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
